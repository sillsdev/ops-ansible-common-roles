---
# Configures the CSF firewall

- stat: path=/etc/csf/csf.conf
  register: csf_stat
  tags:
    - csf_ports
  
- fail: msg="csf is not installed"
  when: not csf_stat.stat.exists
  tags:
    - csf_ports

# General CSF Configuration
- lineinfile: 
    path: /etc/csf/csf.conf
    regexp: "{{item.regexp}}"
    line: "{{item.line}}"
  with_items:
    - { regexp: '^TCP_IN =', line: 'TCP_IN = "{{csf_config_ports.tcp4_in|join(",")}}"' }
    - { regexp: '^TCP_OUT =', line: 'TCP_OUT = "{{csf_config_ports.tcp4_out|join(",")}}"' }
    - { regexp: '^UDP_IN =', line: 'UDP_IN = "{{csf_config_ports.udp4_in|join(",")}}"' }
    - { regexp: '^UDP_OUT =', line: 'UDP_OUT = "{{csf_config_ports.udp4_out|join(",")}}"' }
    - { regexp: '^TCP6_IN =', line: 'TCP6_IN = "{{csf_config_ports.tcp4_in|join(",")}}"' }
    - { regexp: '^TCP6_OUT =', line: 'TCP6_OUT = "{{csf_config_ports.tcp4_out|join(",")}}"' }
    - { regexp: '^UDP6_IN =', line: 'UDP6_IN = "{{csf_config_ports.udp4_in|join(",")}}"' }
    - { regexp: '^UDP6_OUT =', line: 'UDP6_OUT = "{{csf_config_ports.udp4_out|join(",")}}"' }
  tags:
    - csf_ports
  notify:
    - restart csf

- lineinfile: 
    path: /etc/csf/csf.allow
    regexp: "^{{item.ip}}"
    line: "{{item.ip}} # {{item.comment | default('')}}"
  with_items: "{{csf_config_allow}}"
  tags:
    - csf_ports
    - csf_ports_allow
  notify:
    - restart csf

- lineinfile: 
    path: /etc/csf/csf.conf
    regexp: "{{item.regexp}}"
    line: "{{item.line}}"
  with_items:
    - { regexp: '^AUTO_UPDATES =', line: 'AUTO_UPDATES = "{{csf_config_auto_updates}}"' }
    - { regexp: '^TESTING =', line: 'TESTING = "{{csf_config_testing}}"' }
    - { regexp: '^ETH_DEVICE =', line: 'ETH_DEVICE = "{{csf_config_device}}"' }
    - { regexp: '^DENY_IP_LIMIT =', line: 'DENY_IP_LIMIT = "100"' }
    - { regexp: '^LF_LOOKUPS =', line: 'LF_LOOKUPS = "1"' }
    - { regexp: '^SMTP_BLOCK =', line: 'SMTP_BLOCK = "1"' }
    - { regexp: '^SMTP_ALLOWUSER =', line: 'SMTP_ALLOWUSER = "postfix"' }
    - { regexp: '^SMTP_ALLOWGROUP =', line: 'SMTP_ALLOWGROUP = "mail,postfix"' }
    - { regexp: '^URLGET =', line: 'URLGET = "1"' }
    - { regexp: '^LF_SSH_EMAIL_ALERT =', line: 'LF_SSH_EMAIL_ALERT = "{{csf_config_alert_ssh_email}}"' }
    - { regexp: '^LF_INTERVAL =', line: 'LF_INTERVAL = "{{csf_config_lfd_interval}}"' }
    - { regexp: '^LF_DISTFTP =', line: 'LF_DISTFTP = "{{csf_config_lfd_dist_ftp.limit}}"' }
    - { regexp: '^LF_DISTFTP_UNIQ =', line: 'LF_DISTFTP_UNIQ = "{{csf_config_lfd_dist_ftp.unique}}"' }
    - { regexp: '^LF_DISTFTP_PERM =', line: 'LF_DISTFTP_PERM = "{{csf_config_lfd_dist_ftp.time}}"' }
    - { regexp: '^LF_DISTFTP_ALERT =', line: 'LF_DISTFTP_ALERT = "{{csf_config_lfd_dist_ftp.alert}}"' }
    - { regexp: '^PS_INTERVAL =', line: 'PS_INTERVAL = "{{csf_config_port_scan.interval}}"' }
    - { regexp: '^PS_LIMIT =', line: 'PS_LIMIT = "{{csf_config_port_scan.limit}}"' }
    - { regexp: '^PORTKNOCKING_ALERT =', line: 'PORTKNOCKING_ALERT = "{{csf_config_port_knocking.alert}}"' }
    - { regexp: '^ST_SYSTEM =', line: 'ST_SYSTEM = "{{csf_config_system.enabled}}"' }
    - { regexp: '^LF_WEBMIN_EMAIL_ALERT =', line: 'LF_WEBMIN_EMAIL_ALERT = "0"' }
    - { regexp: '^DYNDNS =', line: 'DYNDNS = "{{csf_config_dyndns}}"' }
    - { regexp: '^DYNDNS_IGNORE =', line: 'DYNDNS_IGNORE = "{{csf_config_dyndns_ignore}}"' }
    # - { regexp: '^', line: '' }
  notify:
    - restart lfd
    - restart csf
  tags:
    - csf_conf

- lineinfile:
    path: /etc/csf/csf.conf
    regexp: "^{{item.name}} ="
    line: "{{item.name}} = {{item.value}}"
  with_items:
    - { name: 'PT_LIMIT', value: '"{{csf_config_process_limit}}"' }
    - { name: 'PT_INTERVAL', value: '"{{csf_config_process_interval}}"' }
    - { name: 'PT_SKIP_HTTP', value: '"{{csf_config_process_skip_http}}"' }
    - { name: 'PT_DELETED', value: '"{{csf_config_process_deleted}}"' }
    - { name: 'PT_DELETED_ACTION', value: '"{{csf_config_process_deleted_action}}"' }
    - { name: 'PT_USERPROC', value: '"{{csf_config_process_userproc}}"' }
    - { name: 'PT_USERMEM', value: '"{{csf_config_process_usermem}}"' }
    - { name: 'PT_USERTIME', value: '"{{csf_config_process_usertime}}"' }
    - { name: 'PT_USERKILL', value: '"{{csf_config_process_userkill}}"' }
    - { name: 'PT_USERKILL_ALERT', value: '"{{csf_config_process_userkill_alert}}"' }
    - { name: 'PT_USER_ACTION', value: '"{{csf_config_process_user_action}}"' }
    - { name: 'PT_LOAD', value: '"{{csf_config_process_load}}"' }
    - { name: 'PT_LOAD_AVG', value: '"{{csf_config_process_load_avg}}"' }
    - { name: 'PT_LOAD_LEVEL', value: '"{{csf_config_process_load_level}}"' }
    - { name: 'PT_LOAD_SKIP', value: '"{{csf_config_process_load_skip}}"' }
    - { name: 'PT_APACHESTATUS', value: '"{{csf_config_process_apachestatus}}"' }
    - { name: 'PT_LOAD_ACTION', value: '"{{csf_config_process_load_action}}"' }
    - { name: 'PT_FORKBOMB', value: '"{{csf_config_process_forkbomb}}"' }
    - { name: 'PT_SSHDHUNG', value: '"{{csf_config_process_sshdhung}}"' }
  notify:
    - restart lfd
  tags:
    - csf_process_tracking

# Configure the LFD checks. Each named check has a limit on hits after which ip will be blocked for time seconds.
- lineinfile: 
    path: /etc/csf/csf.conf
    regexp: '^LF_{{item.name}} ='
    line: 'LF_{{item.name}} = "{{item.limit}}"'
  with_items:
    "{{csf_config_lfd_blocks}}"
  notify:
    - restart lfd
  tags:
    - csf_lfd_checks

- lineinfile: 
    path: /etc/csf/csf.conf
    regexp: '^LF_{{item.name}}_PERM ='
    line: 'LF_{{item.name}}_PERM = "{{item.time}}"'
  with_items:
    "{{csf_config_lfd_blocks}}"
  notify:
    - restart lfd
  tags:
    - csf_lfd_checks

# Configure the location of the logfiles
- lineinfile: 
    path: /etc/csf/csf.conf
    regexp: '^{{item.name}}_LOG ='
    line: '{{item.name}}_LOG = "{{item.file}}"'
  with_items:
    "{{csf_config_logs}}"
  notify:
    - restart lfd
      
# Configure the location of the custom logfiles
- lineinfile: 
    path: /etc/csf/csf.conf
    regexp: '^{{item.name}}_LOG ='
    line: '{{item.name}}_LOG = "{{item.file}}"'
  with_items:
    "{{csf_config_logs_custom}}"
  notify:
    - restart lfd

# Template the csf.pignore
- template:
    dest: /etc/csf/csf.pignore
    src: csf.pignore.j2
  notify:
    - restart lfd
  tags:
    - csf_pignore

# Copy any custom rules
- copy:
    dest: /usr/local/csf/bin/
    src: regex.custom.pm
  notify:
    - restart lfd

# dyndns
- lineinfile: 
    path: /etc/csf/csf.dyndns
    line: '{{item.protocol}}|{{item.direction}}|{{item.port}}|{{item.domain}}'
  with_items:
    "{{csf_dyndns_allow}}"
  notify:
    - restart lfd
    - restart csf
  tags:
    - csf_dyndns
